import requests
import re
import secrets


def get_authenticated_session_(host, login_page_url, data, send_json=False):
    """Get authenticated session, provide host with protocol and port, login page url and data to authenticate"""
    sess = requests.Session()
    login_page = sess.get(f'{host}/{login_page_url}').text()
    if login_page.find('csrf') != -1:
        csrf_token_name = re.findall(r'name="(csrf\S*)"', login_page)[0]
        csrf_token = re.findall(r'value="(\S{20}\S+)"', login_page)[0]
        data[csrf_token_name] = csrf_token

    form_target = login_page_url

    possible_target = re.findall(r'target=(\S*)', login_page)
    if possible_target:
        form_target = possible_target[0]

    if send_json:
        sess.post(f'{host}/{form_target}', json=data)
    else:
        sess.post(f'{host}/{form_target}', data=data)

    return sess


def register_random(host, register_page_url, fields_to_fill, filled_fields=None, send_json=False):
    """Register random account. Provide host with protocol and port, register page and fields list. Returns res data"""
    data = filled_fields or dict()
    sess = requests.Session()

    register_page = sess.get(f'{host}/{register_page_url}').text()
    if register_page.find('csrf') != -1:
        csrf_token_name = re.findall(r'name="(csrf\S*)"', register_page)[0]
        csrf_token = re.findall(r'value="(\S{20}\S+)"', register_page)[0]
        data[csrf_token_name] = csrf_token

    for field in fields_to_fill:
        data[field] = secrets.token_hex(6)

    form_target = register_page_url

    possible_target = re.findall(r'target=(\S*)', register_page)
    if possible_target:
        form_target = possible_target[0]

    if send_json:
        sess.post(f'{host}/{form_target}', json=data)
    else:
        sess.post(f'{host}/{form_target}', data=data)

    return data
